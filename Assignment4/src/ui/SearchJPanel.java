/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;

/**
 *
 * @author Dhaval
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    EncounterHistory encounterHistory;
    PatientDirectory patientDirectory;
    String SelectedText="";
    public SearchJPanel(EncounterHistory encounterHistory,PatientDirectory patientDirectory) {
        initComponents();
        this.encounterHistory = encounterHistory;
        this.patientDirectory=patientDirectory;
        displayEncounterHistory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEncounterDetails = new javax.swing.JTable();
        jSearchCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtSearch1 = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        txtSearch2 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();

        setBackground(new java.awt.Color(158, 174, 204));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Patient");

        tblEncounterDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Patient Id", "Blood Pressure Rate", "Health Status", "Visiting Date"
            }
        ));
        jScrollPane1.setViewportView(tblEncounterDetails);

        jSearchCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Search by Age Group", "Search by Community", "Search by HouseNo", "Search by PatientId" }));
        jSearchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchComboActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Search");

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Id", "Name", "Age", "City", "Community", "House No", "Blood Pressure", "Is Normal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPatient);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 791, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSearchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearch2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
            ArrayList<Patient> patientList = patientDirectory.getPatientList();
            
            if(SelectedText =="Search by Age Group")
            {
                int minAge = Integer.parseInt(txtSearch1.getText());
                int maxAge = Integer.parseInt(txtSearch2.getText());
                List<Patient> newpatientList= patientList.stream().filter(a -> a.getPersonAge()>=minAge && a.getPersonAge()<=maxAge && a.isIsNormal() == false).collect(Collectors.toList());
                displayPatientTableInfo(newpatientList);
            }
            else if(SelectedText =="Search by Community")
            {
                String communityName = txtSearch1.getText();
                List<Patient> newpatientList = patientList.stream().filter(a -> a.getHousing().getCommunityName().contains(communityName) && a.isIsNormal()== false).collect(Collectors.toList());;
                displayPatientTableInfo(newpatientList);
            }
            else if(SelectedText =="Search by HouseNo")
            {
                int HouseNo = Integer.parseInt(txtSearch1.getText());
                List<Patient> newpatientList = patientList.stream().filter(a -> a.getHousing().getHouseNo()== HouseNo && a.isIsNormal()==false).collect(Collectors.toList());;
                displayPatientTableInfo(newpatientList);
            }
            else if(SelectedText =="Search by PatientId")
            {
                int PatientId = Integer.parseInt(txtSearch1.getText());
                List<Patient> newpatientList= patientList.stream().filter(a -> a.getPatientId()==PatientId && a.isIsNormal()==false).collect(Collectors.toList());
                displayPatientTableInfo(newpatientList);
            }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void jSearchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchComboActionPerformed
        // TODO add your handling code here:
        SelectedText=jSearchCombo.getSelectedItem().toString();
    }//GEN-LAST:event_jSearchComboActionPerformed

    private void displayEncounterHistory(){
        DefaultTableModel model=(DefaultTableModel) tblEncounterDetails.getModel();
        model.setRowCount(0);
        for(Encounter p : encounterHistory.getEncounterList()){
            Object[] row =new Object[4];
            row[0]=p.getPatientId();
            row[1]=p.getVs().getBloodPressure();
            row[2]=p.isIsPatientNormal()? "Normal" : "Abnormal";
            row[3]=p.getVisitingDate();
            model.addRow(row);
        }
    }
    
    private void displayPatientTableInfo(List<Patient> patientList) {
        //btnSave.setVisible(false);
        DefaultTableModel model=(DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        for(Patient p : patientList){
            Object[] row =new Object[8];
            row[0]=p.getPatientId();
            row[1]=p.getPersonName();
            row[2]=p.getPersonAge();
            row[3]=p.getHousing().getCityname(); 
            row[4]=p.getHousing().getCommunityName(); 
            row[5]=p.getHousing().getHouseNo(); 
            row[6]=p.getVs().getBloodPressure();
            row[7]=p.isIsNormal()? "Normal" : "Abnormal";
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jSearchCombo;
    private javax.swing.JTable tblEncounterDetails;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtSearch1;
    private javax.swing.JTextField txtSearch2;
    // End of variables declaration//GEN-END:variables
}
