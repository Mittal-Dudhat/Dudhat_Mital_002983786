/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import static java.lang.Integer.min;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.CarModel;
import model.CarModelHistory;

/**
 *
 * @author Dhaval
 */
public class SearchPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewUpdatePanel
     */
    CarModelHistory modelHistory;
    String SelectedText="";
    
    public SearchPanel(CarModelHistory modelHistory) {
        initComponents();
        this.modelHistory= modelHistory;
        displayTableInfo();
        txtSearchData.setVisible(false);
        lblSearchData.setVisible(false);
        txtSearchData2.setVisible(false);
        if(modelHistory.getCarHistory().size() > 0)
        {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/YYYY hh:mm:ss");
            lblUpdatedDate.setText("Catalog Updated Date: " +formatter.format(modelHistory.getUpdatedDate()).toString());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroupUber = new javax.swing.ButtonGroup();
        btnGroupAvailable = new javax.swing.ButtonGroup();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allControlPane = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCarModels = new javax.swing.JTable();
        lblSearch = new javax.swing.JLabel();
        searchCarModelCombo = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTempCarData = new javax.swing.JTable();
        lblSearchData = new javax.swing.JLabel();
        txtSearchData = new javax.swing.JTextField();
        txtSearchData2 = new javax.swing.JTextField();
        lblUpdatedDate = new javax.swing.JLabel();

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Search Car Models");
        lblTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        tblCarModels.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Model No", "Registration No", "Manufacturer", "City", "Manufacturing Year", "No of Seats", "Uber Affiliated", "Certificate Date", "Currently Available", "Updated Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCarModels);

        lblSearch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblSearch.setText("Search Car By:");

        searchCarModelCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--- Select One ----", "First Available Car", "Car Availability", "Manufacturer", "Manufacturing Year", "No of Seats", "Registration No", "Model No", "Manufacturers used by Uber", "Catalog Updated Date", "City", "Expired Maintanance Certificate" }));
        searchCarModelCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCarModelComboActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("All Car Data :");

        tblTempCarData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Model No", "Registration No", "Manufacturer", "City", "Manufacturing Year", "No Of Seats", "Uber Affiliated", "Certificate Date", "Currently Available", "Updated Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblTempCarData);

        javax.swing.GroupLayout allControlPaneLayout = new javax.swing.GroupLayout(allControlPane);
        allControlPane.setLayout(allControlPaneLayout);
        allControlPaneLayout.setHorizontalGroup(
            allControlPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(allControlPaneLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(allControlPaneLayout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(allControlPaneLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(allControlPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearchData, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(allControlPaneLayout.createSequentialGroup()
                        .addComponent(searchCarModelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchData, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchData2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)))
                .addContainerGap(200, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, allControlPaneLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblUpdatedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        allControlPaneLayout.setVerticalGroup(
            allControlPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(allControlPaneLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblUpdatedDate, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(allControlPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCarModelCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearchData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblSearchData, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(allControlPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 942, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 829, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        if(modelHistory.getCarHistory().size() > 0)
        {
            ArrayList<CarModel> newCarModelList = modelHistory.getCarHistory();
            if(SelectedText =="First Available Car")
            {
                List<CarModel> availableCarList = newCarModelList.stream().filter(a -> a.isIsAvailable()==true).collect(Collectors.toList());
                Collections.sort(availableCarList, (o1, o2) -> o1.getUpdatedDate().compareTo(o2.getUpdatedDate()));
                if(availableCarList.size() > 1)
                {
                    modelHistory.setTempCarData(new ArrayList<CarModel>(availableCarList.subList(0, min(newCarModelList.size(), 1))));
                }
                else
                {
                    modelHistory.setTempCarData(new ArrayList<CarModel>(availableCarList));
                }
                
                if(availableCarList.size() == 0)
                {
                    JOptionPane.showMessageDialog(this,"No data found");
                }
                if(modelHistory.getTempCarData() != null)
                {
                    displayTempTableInfo(modelHistory.getTempCarData());
                }
            }
            else if(SelectedText =="Car Availability")
            {
                List<CarModel> availableCarList= newCarModelList.stream().filter(a -> a.isIsAvailable()==true).collect(Collectors.toList());
                List<CarModel> NotAvailableCarList= newCarModelList.stream().filter(a -> a.isIsAvailable()==false).collect(Collectors.toList());
                DefaultTableModel model=(DefaultTableModel) tblTempCarData.getModel();
                model.setRowCount(0);
                lblSearchData.setText("Available Cars : "+ availableCarList.size() + "        Not Available Cars:"+ NotAvailableCarList.size());
            }
            else if(SelectedText =="Manufacturer")
            {
              if(txtSearchData.getText().trim() == "")
              {
                  JOptionPane.showMessageDialog(this,"Please enter Manufacturer Name to Search");
              }
              else
              {
                  List<CarModel> CarList= newCarModelList.stream().filter(a -> a.getManufracturer().contains(txtSearchData.getText())).collect(Collectors.toList());
                  modelHistory.setTempCarData(new ArrayList<CarModel>(CarList));
                  if(modelHistory.getTempCarData().size() == 0)
                  {
                      JOptionPane.showMessageDialog(this,"No data found");
                  }
                
                  displayTempTableInfo(modelHistory.getTempCarData()); 
              }
            }
            else if(SelectedText =="Manufacturing Year")
            {
              if(txtSearchData.getText().trim() == "")
              {
                  JOptionPane.showMessageDialog(this,"Please enter Manufacturing Year to Search");
              }
              else
              {
                int ManufactringYear = Integer.parseInt(txtSearchData.getText());
                List<CarModel> CarList= newCarModelList.stream().filter(a -> a.getYear()==ManufactringYear).collect(Collectors.toList());
                modelHistory.setTempCarData(new ArrayList<CarModel>(CarList));
                if(modelHistory.getTempCarData().size() == 0)
                {
                    JOptionPane.showMessageDialog(this,"No data found");
                }
                displayTempTableInfo(modelHistory.getTempCarData());
              }
            }
            else if(SelectedText =="No of Seats")
            {
              if(txtSearchData.getText().trim() == "" && txtSearchData2.getText().trim() == "")
              {
                  JOptionPane.showMessageDialog(this,"Please enter minimum and maximum No of Seats to Search");
              }
              else
              {
                int minNoOfSeats = Integer.parseInt(txtSearchData.getText());
                int maxNoOfSeats = Integer.parseInt(txtSearchData2.getText());
                List<CarModel> CarList= newCarModelList.stream().filter(a -> a.getNoOfSeats()>=minNoOfSeats && a.getNoOfSeats()<=maxNoOfSeats).collect(Collectors.toList());
                modelHistory.setTempCarData(new ArrayList<CarModel>(CarList));
                if(modelHistory.getTempCarData().size() == 0)
                {
                    JOptionPane.showMessageDialog(this,"No data found");
                }
                displayTempTableInfo(modelHistory.getTempCarData());
              }
            }
            else if(SelectedText =="Registration No")
            {
              if(txtSearchData.getText().trim() == "")
              {
                  JOptionPane.showMessageDialog(this,"Please enter Car registration No to Search");
              }
              else
              {
                List<CarModel> CarList= newCarModelList.stream().filter(a -> a.getVehRegNo().contains(txtSearchData.getText())).collect(Collectors.toList());
                modelHistory.setTempCarData(new ArrayList<CarModel>(CarList));
                if(modelHistory.getTempCarData().size() == 0)
                {
                    JOptionPane.showMessageDialog(this,"No data found");
                }
                displayTempTableInfo(modelHistory.getTempCarData());
              }
            }
            else if(SelectedText =="Model No")
            {
              if(txtSearchData.getText().trim() == "")
              {
                  JOptionPane.showMessageDialog(this,"Please enter Car Model No to Search");
              }
              else
              {
                List<CarModel> CarList= newCarModelList.stream().filter(a -> a.getModelNo().contains(txtSearchData.getText())).collect(Collectors.toList());
                modelHistory.setTempCarData(new ArrayList<CarModel>(CarList));
                if(modelHistory.getTempCarData().size() == 0)
                {
                    JOptionPane.showMessageDialog(this,"No data found");
                }
                displayTempTableInfo(modelHistory.getTempCarData());
              }
            }
            else if(SelectedText =="Manufacturers used by Uber")
            {
                List<CarModel> CarList= newCarModelList.stream().filter(a -> a.isIsUsedByUber()).collect(Collectors.toList());
                String ManufacturerName="";
                for(CarModel cm : CarList){
                    if(ManufacturerName == "")
                    {
                        ManufacturerName = "List Of Manufacturers :";
                    }
                    ManufacturerName += cm.getManufracturer()+"\n";
                }
                if(ManufacturerName == "")
                {
                    ManufacturerName="No Data Found";  
                }
                lblSearchData.setText(ManufacturerName);
            }
            else if(SelectedText =="Catalog Updated Date")
            {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/YYYY hh:mm:ss");
                lblSearchData.setText("Catalog Date: " +formatter.format(modelHistory.getUpdatedDate()).toString());
            }
            else if(SelectedText =="City")
            {
                if(txtSearchData.getText().trim() == "")
              {
                  JOptionPane.showMessageDialog(this,"Please enter Car Model No to Search");
              }
              else
              {
                List<CarModel> CarList= newCarModelList.stream().filter(a -> a.getCity().contains(txtSearchData.getText().trim())).collect(Collectors.toList());
                modelHistory.setTempCarData(new ArrayList<CarModel>(CarList));
                if(modelHistory.getTempCarData().size() == 0)
                {
                    JOptionPane.showMessageDialog(this,"No data found");
                }
                displayTempTableInfo(modelHistory.getTempCarData());
              }
            }
            else if(SelectedText =="Expired Maintanance Certificate")
            {
               ArrayList<CarModel> carModelList=new ArrayList<CarModel>();
                try{
                    for(CarModel cm : newCarModelList){
                        Date date = new SimpleDateFormat("MM-dd-yyyy").parse(cm.getMaintainanceCertificateDate());//java.sql.Date.valueOf(cm.getMaintainanceCertificateDate());
                        Date todayDate = new Date();

                        if(date.compareTo(todayDate) < 0)
                        {
                            carModelList.add(cm);
                        }
                    }
                    modelHistory.setTempCarData(new ArrayList<CarModel>(carModelList));
                    if(modelHistory.getTempCarData().size() == 0)
                    {
                      JOptionPane.showMessageDialog(this,"No data found");
                    }
                    displayTempTableInfo(modelHistory.getTempCarData());
                }
                catch(Exception ex)
                {
                    JOptionPane.showMessageDialog(this,"No data found");
                }
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this,"No data found");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void searchCarModelComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCarModelComboActionPerformed
        // TODO add your handling code here:
        lblSearchData.setText("");
        txtSearchData.setText("");
        txtSearchData2.setText("");
        SelectedText=searchCarModelCombo.getSelectedItem().toString();
        if(SelectedText =="First Available Car")
        {
            txtSearchData.setVisible(false);
            lblSearchData.setVisible(false);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="Car Availability")
        {
            txtSearchData.setVisible(false);
            lblSearchData.setVisible(true);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="Manufacturer")
        {
            txtSearchData.setVisible(true);
            lblSearchData.setVisible(false);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="Manufacturing Year")
        {
            txtSearchData.setVisible(true);
            lblSearchData.setVisible(false);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="No of Seats")
        {
            txtSearchData.setVisible(true);
            txtSearchData2.setVisible(true);
            lblSearchData.setVisible(false);           
        }
        else if(SelectedText =="Registration No")
        {
            txtSearchData.setVisible(true);
            lblSearchData.setVisible(false);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="Model No")
        {
            txtSearchData.setVisible(true);
            lblSearchData.setVisible(false);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="Manufacturers used by Uber")
        {
            txtSearchData.setVisible(false);
            lblSearchData.setVisible(true);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="Catalog Updated Date")
        {
            txtSearchData.setVisible(false);
            lblSearchData.setVisible(true);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="City")
        {
            txtSearchData.setVisible(true);
            lblSearchData.setVisible(false);
            txtSearchData2.setVisible(false);
        }
        else if(SelectedText =="Expired Maintanance Certificate")
        {
            txtSearchData.setVisible(false);
            lblSearchData.setVisible(false);
            txtSearchData2.setVisible(false);
        }
    }//GEN-LAST:event_searchCarModelComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel allControlPane;
    private javax.swing.ButtonGroup btnGroupAvailable;
    private javax.swing.ButtonGroup btnGroupUber;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSearchData;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUpdatedDate;
    private javax.swing.JComboBox<String> searchCarModelCombo;
    private javax.swing.JTable tblCarModels;
    private javax.swing.JTable tblTempCarData;
    private javax.swing.JTextField txtSearchData;
    private javax.swing.JTextField txtSearchData2;
    // End of variables declaration//GEN-END:variables

    private void displayTableInfo() {
        DefaultTableModel model=(DefaultTableModel) tblCarModels.getModel();
        model.setRowCount(0);
        for(CarModel cm : modelHistory.getCarHistory()){
            Object[] row =new Object[10];
            row[0]=cm.getModelNo();
            row[1]=cm.getVehRegNo();
            row[2]=cm.getManufracturer();
            row[3]=cm.getCity(); 
            row[4]=cm.getYear(); 
            row[5]=cm.getNoOfSeats(); 
            row[6]=cm.isIsUsedByUber() ? "Yes" : "No"; 
            row[7]=cm.getMaintainanceCertificateDate(); 
            row[8]=cm.isIsAvailable()? "Yes" : "No";
            row[9]=cm.getUpdatedDate();
            model.addRow(row);
        }
    }
    
    private void displayTempTableInfo(List<CarModel> CarModelList) {
        DefaultTableModel model=(DefaultTableModel) tblTempCarData.getModel();
        model.setRowCount(0);
        for(CarModel cm : CarModelList){
            Object[] row =new Object[10];
            row[0]=cm.getModelNo();
            row[1]=cm.getVehRegNo();
            row[2]=cm.getManufracturer();
            row[3]=cm.getCity(); 
            row[4]=cm.getYear(); 
            row[5]=cm.getNoOfSeats(); 
            row[6]=cm.isIsUsedByUber() ? "Yes" : "No"; 
            row[7]=cm.getMaintainanceCertificateDate(); 
            row[8]=cm.isIsAvailable()? "Yes" : "No";
            row[9]=cm.getUpdatedDate();
            model.addRow(row);
        }
    }
}
